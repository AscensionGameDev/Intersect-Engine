From f0b4faa1815dd0b9856119ad38220a8e4e6cd001 Mon Sep 17 00:00:00 2001
From: Bandana <aurelende@protonmail.com>
Date: Thu, 2 Apr 2020 14:35:33 -0400
Subject: [PATCH 01/12] diagonal movement

Signed-off-by: Bandana <aurelende@protonmail.com>
---
 .../Network/Packets/Client/MovePacket.cs      |   5 +-
 Intersect.Client/Entities/Entity.cs           |  77 +++++++++--
 Intersect.Client/Entities/Player.cs           | 127 ++++++++++++++----
 Intersect.Client/Networking/PacketSender.cs   |   2 +-
 Intersect.Server/Networking/PacketHandler.cs  |   4 +-
 5 files changed, 177 insertions(+), 38 deletions(-)

diff --git a/Intersect (Core)/Network/Packets/Client/MovePacket.cs b/Intersect (Core)/Network/Packets/Client/MovePacket.cs
index f4c3a02e..5e0e71c1 100644
--- a/Intersect (Core)/Network/Packets/Client/MovePacket.cs	
+++ b/Intersect (Core)/Network/Packets/Client/MovePacket.cs	
@@ -6,12 +6,13 @@ namespace Intersect.Network.Packets.Client
     public class MovePacket : CerasPacket
     {
 
-        public MovePacket(Guid mapId, byte x, byte y, byte dir)
+        public MovePacket(Guid mapId, byte x, byte y, byte dir, byte deplDir)
         {
             MapId = mapId;
             X = x;
             Y = y;
             Dir = dir;
+            DeplacementDir = deplDir;
         }
 
         public Guid MapId { get; set; }
@@ -22,6 +23,8 @@ public MovePacket(Guid mapId, byte x, byte y, byte dir)
 
         public byte Dir { get; set; }
 
+        public byte DeplacementDir { get; set; }
+
     }
 
 }
diff --git a/Intersect.Client/Entities/Entity.cs b/Intersect.Client/Entities/Entity.cs
index de0f4902..05f059d6 100644
--- a/Intersect.Client/Entities/Entity.cs
+++ b/Intersect.Client/Entities/Entity.cs
@@ -107,6 +107,8 @@ public enum LabelType
 
         private byte mDir;
 
+        private byte mDeplDir;
+
         protected bool mDisposed;
 
         private long mLastUpdate;
@@ -207,6 +209,15 @@ public byte Dir
             set => mDir = (byte) ((value + 4) % 4);
         }
 
+        // DeplacementDir is used because I don't know how to set the sprite animation for the diagonal mouvement.
+        public byte DeplacementDir
+        {
+            get => mDeplDir;
+            set => mDeplDir = (byte)((value + 8) % 8);
+            // I don't know why there was a +4 % 4 for the Dir field, but I just repeated the same thing here.
+            // I guess it's to be sure the value is in the acceptable range.
+        }
+
         public virtual string TransformedSprite
         {
             get => mTransformedSprite;
@@ -512,11 +523,18 @@ public virtual bool Update()
             }
             else if (IsMoving)
             {
-                switch (Dir)
+                float deplacementTime = ecTime * Options.TileHeight / GetMovementTime();
+
+                // Dir = facing direction (only 4)
+                // delta offset Must be more than 0 for movements. 0 = slowest
+                // Direction is related to the sprite animation, I don't know how to set a sprite animation for eache direction
+                // so I use DeplacementDir...
+                switch (DeplacementDir)
                 {
-                    case 0:
-                        OffsetY -= (float) ecTime * (float) Options.TileHeight / GetMovementTime();
+                    case 0: // Up
+                        OffsetY -= deplacementTime;
                         OffsetX = 0;
+
                         if (OffsetY < 0)
                         {
                             OffsetY = 0;
@@ -524,8 +542,8 @@ public virtual bool Update()
 
                         break;
 
-                    case 1:
-                        OffsetY += (float) ecTime * (float) Options.TileHeight / GetMovementTime();
+                    case 1: // Down
+                        OffsetY += deplacementTime;
                         OffsetX = 0;
                         if (OffsetY > 0)
                         {
@@ -534,9 +552,10 @@ public virtual bool Update()
 
                         break;
 
-                    case 2:
-                        OffsetX -= (float) ecTime * (float) Options.TileHeight / GetMovementTime();
+                    case 2: // Left
+                        OffsetX -= deplacementTime;
                         OffsetY = 0;
+
                         if (OffsetX < 0)
                         {
                             OffsetX = 0;
@@ -544,14 +563,54 @@ public virtual bool Update()
 
                         break;
 
-                    case 3:
-                        OffsetX += (float) ecTime * (float) Options.TileHeight / GetMovementTime();
+                    case 3: // Right
+                        OffsetX += deplacementTime;
                         OffsetY = 0;
                         if (OffsetX > 0)
                         {
                             OffsetX = 0;
                         }
 
+                        break;
+                    case 4: // NW     
+                        OffsetY -= deplacementTime;
+                        OffsetX -= deplacementTime;
+
+                        if (OffsetY < 0)
+                            OffsetY = 0;
+                        if (OffsetX < 0)
+                            OffsetX = 0;
+
+                        break;
+                    case 5: // NE
+                        OffsetY -= deplacementTime;
+                        OffsetX += deplacementTime;
+
+                        if (OffsetY < 0)
+                            OffsetY = 0;
+                        if (OffsetX > 0)
+                            OffsetX = 0;
+
+                        break;
+                    case 6: //SW
+                        OffsetY += deplacementTime;
+                        OffsetX -= deplacementTime;
+
+                        if (OffsetY > 0)
+                            OffsetY = 0;
+                        if (OffsetX < 0)
+                            OffsetX = 0;
+
+                        break;
+                    case 7: // SE
+                        OffsetY += deplacementTime;
+                        OffsetX += deplacementTime;
+
+                        if (OffsetY > 0)
+                            OffsetY = 0;
+                        if (OffsetX > 0)
+                            OffsetX = 0;
+
                         break;
                 }
 
diff --git a/Intersect.Client/Entities/Player.cs b/Intersect.Client/Entities/Player.cs
index e7af06e0..304a1d86 100644
--- a/Intersect.Client/Entities/Player.cs
+++ b/Intersect.Client/Entities/Player.cs
@@ -814,28 +814,49 @@ private void HandleInput()
                 movex = 1;
             }
 
+
+            // Used this so I can do multiple switch case
+            var move = movex / 10 + movey;
+
             Globals.Me.MoveDir = -1;
             if (movex != 0f || movey != 0f)
             {
-                if (movey < 0)
+                switch (move)
                 {
-                    Globals.Me.MoveDir = 1;
-                }
+                    case 1.0f:
+                        Globals.Me.MoveDir = 0; // Up
 
-                if (movey > 0)
-                {
-                    Globals.Me.MoveDir = 0;
-                }
+                        break;
+                    case -1.0f:
+                        Globals.Me.MoveDir = 1; // Down
 
-                if (movex < 0)
-                {
-                    Globals.Me.MoveDir = 2;
-                }
+                        break;
+                    case -0.1f: // x = 0, y = -1
+                        Globals.Me.MoveDir = 2; // Left
 
-                if (movex > 0)
-                {
-                    Globals.Me.MoveDir = 3;
+                        break;
+                    case 0.1f:
+                        Globals.Me.MoveDir = 3; // Right
+
+                        break;
+                    case 0.9f:
+                        Globals.Me.MoveDir = 4; // NW
+
+                        break;
+                    case 1.1f:
+                        Globals.Me.MoveDir = 5; // NE
+
+                        break;
+                    case -1.1f:
+                        Globals.Me.MoveDir = 6; // SW
+
+                        break;
+                    case -0.9f:
+                        Globals.Me.MoveDir = 7; // SE
+
+                        break;
                 }
+
             }
         }
 
@@ -1367,49 +1388,105 @@ private void ProcessDirectionalInput()
                 {
                     switch (MoveDir)
                     {
-                        case 0:
+                        // Dir is the direction the player faces
+                        // tmp the next position of the player
+                        // DeplacementDir is used because I don't know how to set the sprite animation for the diagonal mouvement.
+
+                        case 0: // Up
+                            Dir = 0; // Set the sprite direction
                             if (IsTileBlocked(X, Y - 1, Z, CurrentMap, ref blockedBy) == -1)
                             {
                                 tmpY--;
-                                Dir = 0;
+                                DeplacementDir = 0;
                                 IsMoving = true;
                                 OffsetY = Options.TileHeight;
                                 OffsetX = 0;
                             }
 
                             break;
-                        case 1:
+                        case 1: // Down
+                            Dir = 1;
                             if (IsTileBlocked(X, Y + 1, Z, CurrentMap, ref blockedBy) == -1)
                             {
                                 tmpY++;
-                                Dir = 1;
+                                DeplacementDir = 1;
                                 IsMoving = true;
                                 OffsetY = -Options.TileHeight;
                                 OffsetX = 0;
                             }
 
                             break;
-                        case 2:
+                        case 2: // Left
+                            Dir = 2;
                             if (IsTileBlocked(X - 1, Y, Z, CurrentMap, ref blockedBy) == -1)
                             {
                                 tmpX--;
-                                Dir = 2;
+                                DeplacementDir = 2;
                                 IsMoving = true;
                                 OffsetY = 0;
                                 OffsetX = Options.TileWidth;
                             }
 
                             break;
-                        case 3:
+                        case 3: // Right
+                            Dir = 3;
                             if (IsTileBlocked(X + 1, Y, Z, CurrentMap, ref blockedBy) == -1)
                             {
                                 tmpX++;
-                                Dir = 3;
+                                DeplacementDir = 3;
                                 IsMoving = true;
                                 OffsetY = 0;
                                 OffsetX = -Options.TileWidth;
                             }
 
+                            break;
+                        case 4: // NW
+                            Dir = 2;
+                            if (IsTileBlocked(X - 1, Y - 1, Z, CurrentMap, ref blockedBy) == -1)
+                            {
+                                tmpY--;
+                                tmpX--;
+                                DeplacementDir = 4;
+                                IsMoving = true;
+                                OffsetY = Options.TileHeight;
+                                OffsetX = Options.TileWidth;
+                            }
+                            break;
+                        case 5: // NE
+                            Dir = 3;
+                            if (IsTileBlocked(X + 1, Y - 1, Z, CurrentMap, ref blockedBy) == -1)
+                            {
+                                tmpY--;
+                                tmpX++;
+                                DeplacementDir = 5;
+                                IsMoving = true;
+                                OffsetY = Options.TileHeight;
+                                OffsetX = -Options.TileWidth;
+                            }
+                            break;
+                        case 6: // SW
+                            Dir = 2;
+                            if (IsTileBlocked(X - 1, Y + 1, Z, CurrentMap, ref blockedBy) == -1)
+                            {
+                                tmpY++;
+                                tmpX--;
+                                DeplacementDir = 6;
+                                IsMoving = true;
+                                OffsetY = -Options.TileHeight;
+                                OffsetX = Options.TileWidth;
+                            }
+                            break;
+                        case 7: // SE
+                            Dir = 3;
+                            if (IsTileBlocked(X + 1, Y + 1, Z, CurrentMap, ref blockedBy) == -1)
+                            {
+                                tmpY++;
+                                tmpX++;
+                                DeplacementDir = 7;
+                                IsMoving = true;
+                                OffsetY = -Options.TileHeight;
+                                OffsetX = -Options.TileWidth;
+                            }
                             break;
                     }
 
@@ -1472,10 +1549,10 @@ private void ProcessDirectionalInput()
                     }
                     else
                     {
-                        if (MoveDir != Dir)
+                        if (MoveDir != DeplacementDir)
                         {
-                            Dir = (byte) MoveDir;
-                            PacketSender.SendDirection(Dir);
+                            DeplacementDir = (byte) MoveDir;
+                            PacketSender.SendDirection(DeplacementDir);
                         }
 
                         if (blockedBy != null && mLastBumpedEvent != blockedBy && blockedBy.GetType() == typeof(Event))
diff --git a/Intersect.Client/Networking/PacketSender.cs b/Intersect.Client/Networking/PacketSender.cs
index 41082f45..38edb70f 100644
--- a/Intersect.Client/Networking/PacketSender.cs
+++ b/Intersect.Client/Networking/PacketSender.cs
@@ -43,7 +43,7 @@ public static void SendNeedMap(Guid mapId)
 
         public static void SendMove()
         {
-            Network.SendPacket(new MovePacket(Globals.Me.CurrentMap, Globals.Me.X, Globals.Me.Y, Globals.Me.Dir));
+            Network.SendPacket(new MovePacket(Globals.Me.CurrentMap, Globals.Me.X, Globals.Me.Y, Globals.Me.Dir, Globals.Me.DeplacementDir));
         }
 
         public static void SendChatMsg(string msg, byte channel)
diff --git a/Intersect.Server/Networking/PacketHandler.cs b/Intersect.Server/Networking/PacketHandler.cs
index 831504ca..e537af2e 100644
--- a/Intersect.Server/Networking/PacketHandler.cs
+++ b/Intersect.Server/Networking/PacketHandler.cs
@@ -408,10 +408,10 @@ public void HandlePacket(Client client, Player player, MovePacket packet)
                 return;
             }
 
-            var canMove = player.CanMove(packet.Dir);
+            var canMove = player.CanMove(packet.DeplacementDir);
             if ((canMove == -1 || canMove == -4) && client.Entity.MoveRoute == null)
             {
-                player.Move(packet.Dir, player, false);
+                player.Move(packet.DeplacementDir, player, false);
                 if (player.MoveTimer > Globals.Timing.TimeMs)
                 {
                     //TODO: Make this based moreso on the players current ping instead of a flat value that can be abused
-- 
2.25.0.windows.1

