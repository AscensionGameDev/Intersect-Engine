// <auto-generated />
using System;
using Intersect.Server.Database.GameData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Intersect.Server.Migrations.Sqlite.Game
{
    [DbContext(typeof(SqliteGameContext))]
    [Migration("20240607220428_RandomDrops")]
    partial class RandomDrops
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("Intersect.GameObjects.AnimationBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CompleteSound")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Folder")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<string>("Sound")
                        .HasColumnType("TEXT");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Animations");
                });

            modelBuilder.Entity("Intersect.GameObjects.ClassBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AttackAnimationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("AttackAnimation");

                    b.Property<int>("AttackSpeedModifier")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttackSpeedValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttackSpriteOverride")
                        .HasColumnType("TEXT");

                    b.Property<long>("BaseExp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BasePoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CritChance")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CritMultiplier")
                        .HasColumnType("REAL");

                    b.Property<int>("Damage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DamageType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ExpIncrease")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExpOverridesJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("ExperienceOverrides");

                    b.Property<string>("Folder")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IncreasePercentage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JsonBaseStats")
                        .HasColumnType("TEXT")
                        .HasColumnName("BaseStats");

                    b.Property<string>("JsonBaseVitals")
                        .HasColumnType("TEXT")
                        .HasColumnName("BaseVitals");

                    b.Property<string>("JsonItems")
                        .HasColumnType("TEXT")
                        .HasColumnName("Items");

                    b.Property<string>("JsonSpells")
                        .HasColumnType("TEXT")
                        .HasColumnName("Spells");

                    b.Property<string>("JsonSprites")
                        .HasColumnType("TEXT")
                        .HasColumnName("Sprites");

                    b.Property<bool>("Locked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("PointIncrease")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RegenJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("VitalRegen");

                    b.Property<int>("Scaling")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScalingStat")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpawnDir")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SpawnMapId")
                        .HasColumnType("TEXT")
                        .HasColumnName("SpawnMap");

                    b.Property<int>("SpawnX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpawnY")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatIncreaseJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("StatIncreases");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VitalIncreaseJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("VitalIncreases");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Intersect.GameObjects.Crafting.CraftBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT")
                        .HasColumnName("Event");

                    b.Property<int>("FailureChance")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Folder")
                        .HasColumnType("TEXT");

                    b.Property<string>("IngredientsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("Ingredients");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemLossChance")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JsonCraftingRequirements")
                        .HasColumnType("TEXT")
                        .HasColumnName("CraftingRequirements");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Time")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Crafts");
                });

            modelBuilder.Entity("Intersect.GameObjects.CraftingTableBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CraftsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("Crafts");

                    b.Property<string>("Folder")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<long>("TimeCreated")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CraftingTables");
                });

            modelBuilder.Entity("Intersect.GameObjects.EquipmentProperties", b =>
                {
                    b.Property<Guid>("DescriptorId")
                        .HasColumnType("TEXT");

                    b.HasKey("DescriptorId");

                    b.ToTable("Items_EquipmentProperties");
                });

            modelBuilder.Entity("Intersect.GameObjects.Events.EventBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CommonEvent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Folder")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Global")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("MapId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<string>("PagesJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("Pages");

                    b.Property<int>("SpawnX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpawnY")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Intersect.GameObjects.GuildVariableBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Folder")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<string>("TextId")
                        .HasColumnType("TEXT");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("GuildVariables");
                });

            modelBuilder.Entity("Intersect.GameObjects.ItemBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AnimationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("Animation");

                    b.Property<Guid>("AttackAnimationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("AttackAnimation");

                    b.Property<int>("AttackSpeedModifier")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttackSpeedValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BlockAbsorption")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BlockAmount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BlockChance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanBag")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanBank")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanDrop")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Bound");

                    b.Property<bool>("CanGuildBank")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanSell")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanTrade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CannotUseMessage")
                        .HasColumnType("TEXT");

                    b.Property<int>("Cooldown")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CooldownGroup")
                        .HasColumnType("TEXT");

                    b.Property<int>("CritChance")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CritMultiplier")
                        .HasColumnType("REAL");

                    b.Property<int>("Damage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DamageType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long>("DespawnTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DropChanceOnDeath")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EffectsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("Effects");

                    b.Property<Guid>("EquipmentAnimationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("EquipmentAnimation");

                    b.Property<int>("EquipmentSlot")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT")
                        .HasColumnName("Event");

                    b.Property<string>("EventTriggersJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("EventTriggers");

                    b.Property<string>("FemalePaperdoll")
                        .HasColumnType("TEXT");

                    b.Property<string>("Folder")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IgnoreCooldownReduction")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IgnoreGlobalCooldown")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JsonColor")
                        .HasColumnType("TEXT")
                        .HasColumnName("Color");

                    b.Property<string>("JsonUsageRequirements")
                        .HasColumnType("TEXT")
                        .HasColumnName("UsageRequirements");

                    b.Property<string>("MalePaperdoll")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxBankStack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxInventoryStack")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<string>("PercentageStatsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("PercentageStatsGiven");

                    b.Property<string>("PercentageVitalsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("PercentageVitalsGiven");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ProjectileId")
                        .HasColumnType("TEXT")
                        .HasColumnName("Projectile");

                    b.Property<bool>("QuickCast")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rarity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Scaling")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScalingStat")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SingleUse")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DestroySpell");

                    b.Property<int>("SlotCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Speed")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SpellId")
                        .HasColumnType("TEXT")
                        .HasColumnName("Spell");

                    b.Property<bool>("Stackable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("StatsGiven");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tool")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TwoHanded")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VitalsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("VitalsGiven");

                    b.Property<string>("VitalsRegenJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("VitalsRegen");

                    b.Property<string>("WeaponSpriteOverride")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Intersect.GameObjects.Maps.MapList.MapList", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("JsonData")
                        .HasColumnType("TEXT")
                        .HasColumnName("JsonData");

                    b.HasKey("Id");

                    b.ToTable("MapFolders");
                });

            modelBuilder.Entity("Intersect.GameObjects.NpcBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Aggressive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AttackAllies")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("AttackAnimationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("AttackAnimation");

                    b.Property<string>("AttackOnSightConditionsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("AttackOnSightConditions");

                    b.Property<int>("AttackSpeedModifier")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttackSpeedValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CraftsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("Spells");

                    b.Property<int>("CritChance")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CritMultiplier")
                        .HasColumnType("REAL");

                    b.Property<int>("Damage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DamageType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("FleeHealthPercentage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FocusHighestDamageDealer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Folder")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImmunitiesJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("Immunities");

                    b.Property<bool>("IndividualizedLoot")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JsonAggroList")
                        .HasColumnType("TEXT")
                        .HasColumnName("AggroList");

                    b.Property<string>("JsonColor")
                        .HasColumnType("TEXT")
                        .HasColumnName("Color");

                    b.Property<string>("JsonDrops")
                        .HasColumnType("TEXT")
                        .HasColumnName("Drops");

                    b.Property<string>("JsonMaxVital")
                        .HasColumnType("TEXT")
                        .HasColumnName("MaxVital");

                    b.Property<string>("JsonStat")
                        .HasColumnType("TEXT")
                        .HasColumnName("Stats");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Movement")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<bool>("NpcVsNpcEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("OnDeathEventId")
                        .HasColumnType("TEXT")
                        .HasColumnName("OnDeathEvent");

                    b.Property<Guid>("OnDeathPartyEventId")
                        .HasColumnType("TEXT")
                        .HasColumnName("OnDeathPartyEvent");

                    b.Property<string>("PlayerCanAttackConditionsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("PlayerCanAttackConditions");

                    b.Property<string>("PlayerFriendConditionsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("PlayerFriendConditions");

                    b.Property<string>("RegenJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("VitalRegen");

                    b.Property<int>("ResetRadius")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Scaling")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScalingStat")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SightRange")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpawnDuration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpellFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sprite")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Swarm")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Tenacity")
                        .HasColumnType("REAL");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Npcs");
                });

            modelBuilder.Entity("Intersect.GameObjects.PlayerVariableBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Folder")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<string>("TextId")
                        .HasColumnType("TEXT");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PlayerVariables");
                });

            modelBuilder.Entity("Intersect.GameObjects.ProjectileBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AmmoItemId")
                        .HasColumnType("TEXT")
                        .HasColumnName("Ammo");

                    b.Property<int>("AmmoRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnimationsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("Animations");

                    b.Property<int>("Delay")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Folder")
                        .HasColumnType("TEXT");

                    b.Property<bool>("GrappleHook")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GrappleHookOptionsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("GrappleHookOptions");

                    b.Property<bool>("IgnoreActiveResources")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IgnoreExhaustedResources")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IgnoreMapBlocks")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IgnoreZDimension")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Knockback")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<bool>("PierceTarget")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Range")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpawnsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("SpawnLocations");

                    b.Property<int>("Speed")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SpellId")
                        .HasColumnType("TEXT")
                        .HasColumnName("Spell");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Projectiles");
                });

            modelBuilder.Entity("Intersect.GameObjects.QuestBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("BeforeDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompletedCategory")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DoNotShowUnlessRequirementsMet")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EndDescription")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EndEventId")
                        .HasColumnType("TEXT")
                        .HasColumnName("EndEvent");

                    b.Property<string>("Folder")
                        .HasColumnType("TEXT");

                    b.Property<string>("InProgressCategory")
                        .HasColumnType("TEXT");

                    b.Property<string>("InProgressDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("JsonRequirements")
                        .HasColumnType("TEXT")
                        .HasColumnName("Requirements");

                    b.Property<bool>("LogAfterComplete")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LogBeforeOffer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("OrderValue")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Quitable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Repeatable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StartDescription")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StartEventId")
                        .HasColumnType("TEXT")
                        .HasColumnName("StartEvent");

                    b.Property<string>("TasksJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("Tasks");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnstartedCategory")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("Intersect.GameObjects.ResourceBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AnimationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("Animation");

                    b.Property<string>("CannotHarvestMessage")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT")
                        .HasColumnName("Event");

                    b.Property<string>("Folder")
                        .HasColumnType("TEXT");

                    b.Property<string>("JsonDrops")
                        .HasColumnType("TEXT")
                        .HasColumnName("Drops");

                    b.Property<string>("JsonHarvestingRequirements")
                        .HasColumnType("TEXT")
                        .HasColumnName("HarvestingRequirements");

                    b.Property<int>("MaxHp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinHp")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("SpawnDuration")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tool")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VitalRegen")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WalkableAfter")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WalkableBefore")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Intersect.GameObjects.ServerVariableBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Folder")
                        .HasColumnType("TEXT");

                    b.Property<string>("Json")
                        .HasColumnType("TEXT")
                        .HasColumnName("Value");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<string>("TextId")
                        .HasColumnType("TEXT");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ServerVariables");
                });

            modelBuilder.Entity("Intersect.GameObjects.ShopBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("BuySound")
                        .HasColumnType("TEXT");

                    b.Property<bool>("BuyingWhitelist")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("DefaultCurrencyId")
                        .HasColumnType("TEXT")
                        .HasColumnName("DefaultCurrency");

                    b.Property<string>("Folder")
                        .HasColumnType("TEXT");

                    b.Property<string>("JsonBuyingItems")
                        .HasColumnType("TEXT")
                        .HasColumnName("BuyingItems");

                    b.Property<string>("JsonSellingItems")
                        .HasColumnType("TEXT")
                        .HasColumnName("SellingItems");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<string>("SellSound")
                        .HasColumnType("TEXT");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Intersect.GameObjects.SpellBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Bound")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CannotCastMessage")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CastAnimationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CastAnimation");

                    b.Property<int>("CastDuration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CastSpriteOverride")
                        .HasColumnType("TEXT");

                    b.Property<int>("CooldownDuration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CooldownGroup")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT")
                        .HasColumnName("Event");

                    b.Property<string>("Folder")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("HitAnimationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("HitAnimation");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IgnoreCooldownReduction")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IgnoreGlobalCooldown")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JsonCastRequirements")
                        .HasColumnType("TEXT")
                        .HasColumnName("CastRequirements");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("SpellType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TickAnimationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("TickAnimation");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VitalCostJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("VitalCost");

                    b.HasKey("Id");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("Intersect.GameObjects.TilesetBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Tilesets");
                });

            modelBuilder.Entity("Intersect.GameObjects.TimeBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DaylightHuesJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("DaylightHues");

                    b.Property<int>("RangeInterval")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Rate")
                        .HasColumnType("REAL");

                    b.Property<bool>("SyncTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Time");
                });

            modelBuilder.Entity("Intersect.GameObjects.UserVariableBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Folder")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<string>("TextId")
                        .HasColumnType("TEXT");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DataType");

                    b.HasKey("Id");

                    b.ToTable("UserVariables");
                });

            modelBuilder.Entity("Intersect.Server.Maps.MapController", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AHue")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("AttributeData")
                        .HasColumnType("BLOB")
                        .HasColumnName("Attributes");

                    b.Property<int>("BHue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Brightness")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Down")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventIdsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("Events");

                    b.Property<string>("Fog")
                        .HasColumnType("TEXT");

                    b.Property<int>("FogTransparency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FogXSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FogYSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GHue")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HideEquipment")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsIndoors")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Left")
                        .HasColumnType("TEXT");

                    b.Property<string>("LightsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("Lights");

                    b.Property<string>("Music")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<string>("NpcSpawnsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("NpcSpawns");

                    b.Property<string>("OverlayGraphic")
                        .HasColumnType("TEXT");

                    b.Property<string>("Panorama")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlayerLightColorJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("PlayerLightColor");

                    b.Property<float>("PlayerLightExpand")
                        .HasColumnType("REAL");

                    b.Property<byte>("PlayerLightIntensity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerLightSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RHue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Revision")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Right")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sound")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("TileData")
                        .HasColumnType("BLOB");

                    b.Property<long>("TimeCreated")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Up")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WeatherAnimationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("WeatherAnimation");

                    b.Property<int>("WeatherIntensity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeatherXSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeatherYSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ZoneType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("Intersect.GameObjects.AnimationBase", b =>
                {
                    b.OwnsOne("Intersect.GameObjects.AnimationLayer", "Lower", b1 =>
                        {
                            b1.Property<Guid>("AnimationBaseId")
                                .HasColumnType("TEXT");

                            b1.Property<bool>("AlternateRenderLayer")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("DisableRotations")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("FrameCount")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("FrameSpeed")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Light")
                                .HasColumnType("TEXT");

                            b1.Property<int>("LoopCount")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Sprite")
                                .HasColumnType("TEXT");

                            b1.Property<int>("XFrames")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("YFrames")
                                .HasColumnType("INTEGER");

                            b1.HasKey("AnimationBaseId");

                            b1.ToTable("Animations");

                            b1.WithOwner()
                                .HasForeignKey("AnimationBaseId");
                        });

                    b.OwnsOne("Intersect.GameObjects.AnimationLayer", "Upper", b1 =>
                        {
                            b1.Property<Guid>("AnimationBaseId")
                                .HasColumnType("TEXT");

                            b1.Property<bool>("AlternateRenderLayer")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("DisableRotations")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("FrameCount")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("FrameSpeed")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Light")
                                .HasColumnType("TEXT");

                            b1.Property<int>("LoopCount")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Sprite")
                                .HasColumnType("TEXT");

                            b1.Property<int>("XFrames")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("YFrames")
                                .HasColumnType("INTEGER");

                            b1.HasKey("AnimationBaseId");

                            b1.ToTable("Animations");

                            b1.WithOwner()
                                .HasForeignKey("AnimationBaseId");
                        });

                    b.Navigation("Lower");

                    b.Navigation("Upper");
                });

            modelBuilder.Entity("Intersect.GameObjects.EquipmentProperties", b =>
                {
                    b.HasOne("Intersect.GameObjects.ItemBase", "Descriptor")
                        .WithOne("EquipmentProperties")
                        .HasForeignKey("Intersect.GameObjects.EquipmentProperties", "DescriptorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Intersect.GameObjects.Ranges.ItemRange", "StatRange_AbilityPower", b1 =>
                        {
                            b1.Property<Guid>("EquipmentPropertiesDescriptorId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("HighRange")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("LowRange")
                                .HasColumnType("INTEGER");

                            b1.HasKey("EquipmentPropertiesDescriptorId");

                            b1.ToTable("Items_EquipmentProperties");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentPropertiesDescriptorId");
                        });

                    b.OwnsOne("Intersect.GameObjects.Ranges.ItemRange", "StatRange_Attack", b1 =>
                        {
                            b1.Property<Guid>("EquipmentPropertiesDescriptorId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("HighRange")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("LowRange")
                                .HasColumnType("INTEGER");

                            b1.HasKey("EquipmentPropertiesDescriptorId");

                            b1.ToTable("Items_EquipmentProperties");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentPropertiesDescriptorId");
                        });

                    b.OwnsOne("Intersect.GameObjects.Ranges.ItemRange", "StatRange_Defense", b1 =>
                        {
                            b1.Property<Guid>("EquipmentPropertiesDescriptorId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("HighRange")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("LowRange")
                                .HasColumnType("INTEGER");

                            b1.HasKey("EquipmentPropertiesDescriptorId");

                            b1.ToTable("Items_EquipmentProperties");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentPropertiesDescriptorId");
                        });

                    b.OwnsOne("Intersect.GameObjects.Ranges.ItemRange", "StatRange_MagicResist", b1 =>
                        {
                            b1.Property<Guid>("EquipmentPropertiesDescriptorId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("HighRange")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("LowRange")
                                .HasColumnType("INTEGER");

                            b1.HasKey("EquipmentPropertiesDescriptorId");

                            b1.ToTable("Items_EquipmentProperties");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentPropertiesDescriptorId");
                        });

                    b.OwnsOne("Intersect.GameObjects.Ranges.ItemRange", "StatRange_Speed", b1 =>
                        {
                            b1.Property<Guid>("EquipmentPropertiesDescriptorId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("HighRange")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("LowRange")
                                .HasColumnType("INTEGER");

                            b1.HasKey("EquipmentPropertiesDescriptorId");

                            b1.ToTable("Items_EquipmentProperties");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentPropertiesDescriptorId");
                        });

                    b.Navigation("Descriptor");

                    b.Navigation("StatRange_AbilityPower");

                    b.Navigation("StatRange_Attack");

                    b.Navigation("StatRange_Defense");

                    b.Navigation("StatRange_MagicResist");

                    b.Navigation("StatRange_Speed");
                });

            modelBuilder.Entity("Intersect.GameObjects.ItemBase", b =>
                {
                    b.OwnsOne("Intersect.GameObjects.ConsumableData", "Consumable", b1 =>
                        {
                            b1.Property<Guid>("ItemBaseId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Percentage")
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("Type")
                                .HasColumnType("INTEGER");

                            b1.Property<long>("Value")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ItemBaseId");

                            b1.ToTable("Items");

                            b1.WithOwner()
                                .HasForeignKey("ItemBaseId");
                        });

                    b.Navigation("Consumable");
                });

            modelBuilder.Entity("Intersect.GameObjects.ResourceBase", b =>
                {
                    b.OwnsOne("Intersect.GameObjects.ResourceState", "Exhausted", b1 =>
                        {
                            b1.Property<Guid>("ResourceBaseId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Graphic")
                                .HasColumnType("TEXT");

                            b1.Property<bool>("GraphicFromTileset")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Height")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("RenderBelowEntities")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Width")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("X")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Y")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ResourceBaseId");

                            b1.ToTable("Resources");

                            b1.WithOwner()
                                .HasForeignKey("ResourceBaseId");
                        });

                    b.OwnsOne("Intersect.GameObjects.ResourceState", "Initial", b1 =>
                        {
                            b1.Property<Guid>("ResourceBaseId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Graphic")
                                .HasColumnType("TEXT");

                            b1.Property<bool>("GraphicFromTileset")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Height")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("RenderBelowEntities")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Width")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("X")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Y")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ResourceBaseId");

                            b1.ToTable("Resources");

                            b1.WithOwner()
                                .HasForeignKey("ResourceBaseId");
                        });

                    b.Navigation("Exhausted");

                    b.Navigation("Initial");
                });

            modelBuilder.Entity("Intersect.GameObjects.SpellBase", b =>
                {
                    b.OwnsOne("Intersect.GameObjects.SpellCombatData", "Combat", b1 =>
                        {
                            b1.Property<Guid>("SpellBaseId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("CastRange")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("CritChance")
                                .HasColumnType("INTEGER");

                            b1.Property<double>("CritMultiplier")
                                .HasColumnType("REAL");

                            b1.Property<int>("DamageType")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Duration")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Effect")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Friendly")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("HitRadius")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("HoTDoT")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("HotDotInterval")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("OnHitDuration")
                                .HasColumnType("INTEGER")
                                .HasColumnName("OnHit");

                            b1.Property<string>("PercentageStatDiffJson")
                                .HasColumnType("TEXT")
                                .HasColumnName("PercentageStatDiff");

                            b1.Property<Guid>("ProjectileId")
                                .HasColumnType("TEXT")
                                .HasColumnName("Projectile");

                            b1.Property<int>("Scaling")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("ScalingStat")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("StatDiffJson")
                                .HasColumnType("TEXT")
                                .HasColumnName("StatDiff");

                            b1.Property<int>("TargetType")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("TransformSprite")
                                .HasColumnType("TEXT");

                            b1.Property<int>("TrapDuration")
                                .HasColumnType("INTEGER")
                                .HasColumnName("Trap");

                            b1.Property<string>("VitalDiffJson")
                                .HasColumnType("TEXT")
                                .HasColumnName("VitalDiff");

                            b1.HasKey("SpellBaseId");

                            b1.ToTable("Spells");

                            b1.WithOwner()
                                .HasForeignKey("SpellBaseId");
                        });

                    b.OwnsOne("Intersect.GameObjects.SpellDashOpts", "Dash", b1 =>
                        {
                            b1.Property<Guid>("SpellBaseId")
                                .HasColumnType("TEXT");

                            b1.Property<bool>("IgnoreActiveResources")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("IgnoreInactiveResources")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("IgnoreMapBlocks")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("IgnoreZDimensionAttributes")
                                .HasColumnType("INTEGER");

                            b1.HasKey("SpellBaseId");

                            b1.ToTable("Spells");

                            b1.WithOwner()
                                .HasForeignKey("SpellBaseId");
                        });

                    b.OwnsOne("Intersect.GameObjects.SpellWarpData", "Warp", b1 =>
                        {
                            b1.Property<Guid>("SpellBaseId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Dir")
                                .HasColumnType("INTEGER");

                            b1.Property<Guid>("MapId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("X")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Y")
                                .HasColumnType("INTEGER");

                            b1.HasKey("SpellBaseId");

                            b1.ToTable("Spells");

                            b1.WithOwner()
                                .HasForeignKey("SpellBaseId");
                        });

                    b.Navigation("Combat");

                    b.Navigation("Dash");

                    b.Navigation("Warp");
                });

            modelBuilder.Entity("Intersect.GameObjects.ItemBase", b =>
                {
                    b.Navigation("EquipmentProperties");
                });
#pragma warning restore 612, 618
        }
    }
}
